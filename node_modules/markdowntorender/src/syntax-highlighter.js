/**
 * Module for syntax highlighting using highlight.js
 */

/**
 * Get highlight.js resources (CSS and script tags)
 * @param {Object} options - Configuration options
 * @param {string} options.version - Highlight.js version to use (default: '11.9.0')
 * @param {string} options.theme - CSS theme to use (default: 'default')
 * @param {Array<string>} options.languages - Additional languages to include
 * @returns {Object} - Object with CSS and script properties
 */
function getHighlightJsResources(options = {}) {
  const version = options.version || '11.9.0';
  const theme = options.theme || 'default';
  
  // Base resources
  const resources = {
    css: `<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlight.js@${version}/styles/${theme}.css">`,
    script: `<script src="https://cdn.jsdelivr.net/npm/highlight.js@${version}/lib/highlight.min.js"></script>`
  };
  
  // Add additional language scripts if specified
  if (options.languages && Array.isArray(options.languages) && options.languages.length > 0) {
    const languageScripts = options.languages.map(lang => 
      `<script src="https://cdn.jsdelivr.net/npm/highlight.js@${version}/lib/languages/${lang}.min.js"></script>`
    ).join('\n');
    
    resources.script += '\n' + languageScripts;
  }
  
  return resources;
}

/**
 * Process code blocks for syntax highlighting
 * @param {string} html - HTML content with code blocks
 * @param {Object} options - Configuration options
 * @param {boolean} options.autoInit - Whether to initialize on page load (default: true)
 * @param {Array<string>} options.languages - Languages to initialize
 * @param {Object} options.configOverrides - Additional highlight.js configuration options
 * @returns {string} - Processed HTML with initialization script
 */
function processCodeBlocks(html, options = {}) {
  const autoInit = options.autoInit !== undefined ? options.autoInit : true;
  const languages = options.languages || [];
  const configOverrides = options.configOverrides || {};
  
  // Only add initialization script if autoInit is true
  if (!autoInit) return html;
  
  const languagesInit = languages.length > 0 
    ? `\n    // Register specific languages\n    ${languages.map(lang => `hljs.registerLanguage('${lang}', window.hljsLanguages['${lang}']);`).join('\n    ')}` 
    : '';
  
  const configOptions = Object.keys(configOverrides).length > 0 
    ? `,\n      ...${JSON.stringify(configOverrides)}` 
    : '';
  
  const highlightScript = `
    <script>
      document.addEventListener("DOMContentLoaded", function() {${languagesInit}
        // Initialize highlight.js
        hljs.configure({${configOptions}
        });
        hljs.highlightAll();
      });
    </script>
  `;
  
  return html + highlightScript;
}

module.exports = {
  getHighlightJsResources,
  processCodeBlocks
}; 