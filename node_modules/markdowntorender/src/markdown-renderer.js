/**
 * Module for rendering Markdown content with KaTeX, Mermaid and code highlighting
 */
const MarkdownIt = require('markdown-it');
const katexRenderer = require('./katex-renderer');
const mermaidRenderer = require('./mermaid-renderer');
const syntaxHighlighter = require('./syntax-highlighter');

/**
 * Create a configured markdown-it instance
 * @param {Object} options - Markdown-it options
 * @returns {Object} - Configured markdown-it instance
 */
function createMarkdownRenderer(options = {}) {
  // Set default options
  const mdOptions = {
    html: true,           // Enable HTML tags in source
    breaks: false,        // Convert '\n' in paragraphs into <br>
    linkify: true,        // Autoconvert URL-like text to links
    typographer: true,    // Enable smartquotes and other typographic replacements
    ...options
  };
  
  return new MarkdownIt(mdOptions);
}

/**
 * Render Markdown content to HTML with all features
 * @param {string} markdown - Markdown content to render
 * @param {Object} options - Rendering options
 * @param {Object} options.markdown - Markdown-it options
 * @param {Object} options.katex - KaTeX rendering options
 * @param {Object} options.mermaid - Mermaid rendering options
 * @param {Object} options.highlight - Highlight.js options
 * @returns {Object} - Object with html and resources properties
 */
function renderMarkdown(markdown, options = {}) {
  // Initialize options
  const mdOptions = options.markdown || {};
  const katexOptions = options.katex || {};
  const mermaidOptions = options.mermaid || {};
  const highlightOptions = options.highlight || {};
  
  // Create markdown renderer
  const md = createMarkdownRenderer(mdOptions);
  
  // Render markdown to HTML
  let html = md.render(markdown);
  
  // Process with all renderers
  html = katexRenderer.processMathFormulas(html, katexOptions);
  html = mermaidRenderer.processMermaidDiagrams(html, mermaidOptions);
  html = syntaxHighlighter.processCodeBlocks(html, highlightOptions);
  
  // Get all required resources
  const katexResources = katexRenderer.getKaTexResources(katexOptions);
  const mermaidResources = mermaidRenderer.getMermaidResources(mermaidOptions);
  const highlightResources = syntaxHighlighter.getHighlightJsResources(highlightOptions);
  
  // Combine resources
  const resources = {
    css: [
      katexResources.css,
      highlightResources.css
    ].filter(Boolean).join('\n'),
    script: [
      katexResources.script,
      mermaidResources.script, 
      highlightResources.script
    ].filter(Boolean).join('\n')
  };
  
  return {
    html,
    resources
  };
}

/**
 * Render a complete HTML document from Markdown
 * @param {string} markdown - Markdown content
 * @param {Object} options - Rendering options (same as renderMarkdown)
 * @param {string} options.title - HTML document title
 * @param {string} options.lang - HTML document language
 * @returns {string} - Complete HTML document
 */
function renderMarkdownToHtml(markdown, options = {}) {
  const title = options.title || 'Markdown Document';
  const lang = options.lang || 'en';
  
  // Render markdown
  const result = renderMarkdown(markdown, options);
  
  // Create complete HTML document
  return `<!DOCTYPE html>
<html lang="${lang}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${title}</title>
  ${result.resources.css}
  ${result.resources.script}
</head>
<body>
  <div class="markdown-content">
    ${result.html}
  </div>
</body>
</html>`;
}

/**
 * Render a Markdown file to HTML
 * @param {string} inputPath - Path to markdown file
 * @param {string} outputPath - Path for HTML output
 * @param {Object} options - Rendering options (same as renderMarkdownToHtml)
 */
function renderMarkdownFile(inputPath, outputPath, options = {}) {
  const fs = require('fs');
  const path = require('path');
  
  // Read markdown file
  const markdown = fs.readFileSync(inputPath, 'utf8');
  
  // Set title from filename if not provided
  if (!options.title) {
    options.title = path.basename(inputPath, path.extname(inputPath));
  }
  
  // Render to HTML
  const html = renderMarkdownToHtml(markdown, options);
  
  // Write output
  fs.writeFileSync(outputPath, html);
}

module.exports = {
  createMarkdownRenderer,
  renderMarkdown,
  renderMarkdownToHtml,
  renderMarkdownFile
}; 