const fs = require('fs');
const marked = require('marked');
const katex = require('katex');
const jsdom = require('jsdom');
const { JSDOM } = jsdom;

class MarkdownToRender {
  constructor(options = {}) {
    this.options = {
      highlightCode: true,
      renderMath: true,
      codeTheme: 'github', // Default theme for highlight.js
      ...options
    };
    
    // Configure marked
    marked.setOptions({
      gfm: true,
      breaks: true,
      pedantic: false,
      smartLists: true,
      smartypants: true,
      xhtml: false,
      highlight: (code, language) => {
        // Simply pass the code through - highlighting will be done on the client side
        // This prevents any server/build-time highlighting issues
        return code;
      },
      langPrefix: 'hljs language-' // This ensures highlight.js can find and process the code blocks
    });
  }

  // Process math expressions
  processMath(html) {
    if (!this.options.renderMath) return html;
    
    const dom = new JSDOM(html);
    const document = dom.window.document;
    
    // Get all code blocks to exclude them from math rendering
    const codeElements = Array.from(document.querySelectorAll('pre code'));
    const codeBlocks = codeElements.map(el => {
      const parent = el.parentNode;
      return {
        start: html.indexOf(parent.outerHTML),
        end: html.indexOf(parent.outerHTML) + parent.outerHTML.length
      };
    });
    
    // Function to check if position is inside a code block
    const isInCodeBlock = (position) => {
      return codeBlocks.some(block => position >= block.start && position <= block.end);
    };
    
    // Clean math expressions before processing
    const cleanMathExpression = (expr) => {
      // Replace \<br> with \\ for proper LaTeX line breaks
      return expr.replace(/\\<br>/g, '\\\\')
                .replace(/\\</g, '\\\\')  // Also catch incomplete \< tags
                .replace(/<br>/g, '\\\\');  // Replace HTML <br> with LaTeX line breaks
    };
    
    // Process block math ($$...$$)
    let newHtml = '';
    let lastIndex = 0;
    const blockMathRegex = /\$\$([\s\S]*?)\$\$/g;
    let match;
    
    while ((match = blockMathRegex.exec(html)) !== null) {
      const matchStart = match.index;
      const matchEnd = matchStart + match[0].length;
      
      if (!isInCodeBlock(matchStart)) {
        try {
          const before = html.substring(lastIndex, matchStart);
          const cleanExpr = cleanMathExpression(match[1]);
          const rendered = `<div class="math-block">${katex.renderToString(cleanExpr, { displayMode: true })}</div>`;
          newHtml += before + rendered;
          lastIndex = matchEnd;
        } catch (e) {
          console.error('KaTeX block error:', e);
          // Keep original if there's an error
          newHtml += html.substring(lastIndex, matchEnd);
          lastIndex = matchEnd;
        }
      } else {
        // If in code block, keep original
        newHtml += html.substring(lastIndex, matchEnd);
        lastIndex = matchEnd;
      }
    }
    
    // Add the rest of the original html
    newHtml += html.substring(lastIndex);
    html = newHtml;
    
    // Process inline math ($...$) - only outside code blocks
    newHtml = '';
    lastIndex = 0;
    const inlineMathRegex = /\$([^\$\n]+?)\$/g;
    
    while ((match = inlineMathRegex.exec(html)) !== null) {
      const matchStart = match.index;
      const matchEnd = matchStart + match[0].length;
      
      if (!isInCodeBlock(matchStart)) {
        try {
          const before = html.substring(lastIndex, matchStart);
          const cleanExpr = cleanMathExpression(match[1]);
          const rendered = katex.renderToString(cleanExpr, { displayMode: false });
          newHtml += before + rendered;
          lastIndex = matchEnd;
        } catch (e) {
          console.error('KaTeX inline error:', e);
          // Keep original if there's an error
          newHtml += html.substring(lastIndex, matchEnd);
          lastIndex = matchEnd;
        }
      } else {
        // If in code block, keep original
        newHtml += html.substring(lastIndex, matchEnd);
        lastIndex = matchEnd;
      }
    }
    
    // Add the rest of the html
    newHtml += html.substring(lastIndex);
    
    return newHtml;
  }

  // Process mermaid diagrams
  processMermaid(html) {
    const dom = new JSDOM(html);
    const document = dom.window.document;
    
    // Find all mermaid code blocks and wrap them in divs
    const codeBlocks = document.querySelectorAll('code.language-mermaid');
    
    codeBlocks.forEach((codeBlock, index) => {
      const diagramCode = codeBlock.textContent;
      const preElement = codeBlock.parentNode;
      
      // Create a div with mermaid class
      const mermaidDiv = document.createElement('div');
      mermaidDiv.className = 'mermaid';
      mermaidDiv.textContent = diagramCode;
      mermaidDiv.setAttribute('data-index', index);
      
      // Replace the <pre><code> with the mermaid div
      if (preElement && preElement.parentNode) {
        preElement.parentNode.replaceChild(mermaidDiv, preElement);
      }
    });
    
    return dom.serialize();
  }

  render(markdown) {
    // Convert markdown to HTML
    let html = marked.parse(markdown);
    
    // Process math expressions
    html = this.processMath(html);
    
    // Process mermaid diagrams
    html = this.processMermaid(html);
    
    return html;
  }

  renderFile(filePath, outputPath) {
    try {
      const markdown = fs.readFileSync(filePath, 'utf8');
      const html = this.render(markdown);
      
      // Wrap HTML in a complete document with CSS
      const fullHtml = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Markdown Renderer</title>
  <!-- Use full build of highlight.js with all languages included -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/${this.options.codeTheme}.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/python.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/java.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/cpp.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/sql.min.js"></script>
  
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css">
  <script src="https://cdn.jsdelivr.net/npm/mermaid@10.3.1/dist/mermaid.min.js"></script>
  
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    pre {
      margin: 1em 0;
      padding: 0;
      border-radius: 6px;
      overflow: auto;
    }
    pre code.hljs {
      display: block;
      overflow-x: auto;
      padding: 1em;
    }
    code:not(.hljs) {
      font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
      font-size: 85%;
      background-color: rgba(175, 184, 193, 0.2);
      padding: 0.2em 0.4em;
      border-radius: 3px;
    }
    table {
      border-collapse: collapse;
      width: 100%;
      margin-bottom: 20px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    .math-block {
      overflow-x: auto;
      margin: 1em 0;
      padding: 10px 0;
      text-align: center;
    }
    .katex-display {
      margin: 0.5em 0;
      overflow: auto hidden;
    }
    .katex {
      font-size: 1.1em;
    }
    blockquote {
      border-left: 4px solid #ddd;
      padding-left: 16px;
      color: #666;
      margin-left: 0;
    }
    .mermaid {
      text-align: center;
    }
    input[type="checkbox"] {
      margin-right: 6px;
    }
  </style>
</head>
<body>
  ${html}
  
  <script>
    // Initialize and run highlight.js
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize mermaid
      mermaid.initialize({ startOnLoad: true });
      
      // Apply highlighting
      hljs.configure({ ignoreUnescapedHTML: true });
      document.querySelectorAll('pre code').forEach((el) => {
        hljs.highlightElement(el);
      });
    });
    
    // If DOMContentLoaded already fired, run now
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      hljs.configure({ ignoreUnescapedHTML: true });
      hljs.highlightAll();
    }
  </script>
</body>
</html>
      `;
      
      fs.writeFileSync(outputPath, fullHtml);
      return outputPath;
    } catch (error) {
      console.error('Error rendering markdown file:', error);
      throw error;
    }
  }
}

module.exports = MarkdownToRender; 